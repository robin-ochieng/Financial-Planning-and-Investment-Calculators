# Replace outliers with the limits
#data <- data %>%
#mutate(Gross_paid = ifelse(Gross_paid < lower_fence, lower_fence,
#ifelse(Gross_paid > upper_fence, upper_fence, Gross_paid)))
data <- data %>%
mutate(
Acc_Months_ = as.yearmon(Loss_Date),
Acc_Year = as.integer(format(Acc_Months_, "%Y")),
Acc_Month = as.integer(format(Acc_Months_, "%m")),
Acc_Months = (Acc_Year - min(Acc_Year, na.rm = TRUE)) * 12 + Acc_Month - min(Acc_Month, na.rm = TRUE) + 1,
Loss_Year = year(Loss_Date),
Dev_period = floor(difftime(Paid_Date, Loss_Date, units = "days") / (365.25/12)) + 1
)
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
#View(head(data,7))
# Generate Acc_period
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
Periods <- data %>%
filter(Loss_Year>2019) %>%
distinct(Acc_Months) %>%
nrow()
Acc_period <- data %>%
filter(Loss_Year > 2019)%>%
select(Acc_Months) %>%
distinct() %>%
arrange(Acc_Months) %>%
rowwise() %>%
mutate(Dev_period = list(seq(1, Periods, 1))) %>%
unnest(Dev_period)
# Filter data based on val_class
Val_Data <- data %>%
select(Acc_Months, Gross_paid, Dev_period) %>%
mutate(Gross_paid = as.numeric(gsub("[^0-9.]", "", Gross_paid))) %>%
group_by(Acc_Months, Dev_period) %>%
summarise(Gross_Amount = sum(Gross_paid, na.rm = TRUE)) %>%
mutate(Dev_period = as.numeric(as.character(Dev_period))) %>%
right_join(Acc_period, by = c("Acc_Months", "Dev_period"))
# Create triangles
Inc_Tri <- as.triangle(Val_Data,
origin = "Acc_Months",
dev = "Dev_period",
value = "Gross_Amount")
Cum_Tri <- incr2cum(Inc_Tri,na.rm = TRUE)
# Perform Bootstrap
Boot_Method <- BootChainLadder(Cum_Tri, R = 9999)
# Summary
summary_Boot_Method <- summary(Boot_Method)$Totals
view(summary_Boot_Method)
# Confidence levels
confidence_level <- quantile(Boot_Method, c(0.75))
confidence_level <- confidence_level$ByOrigin
View(confidence_level)
#write.csv(Cum_Tri,"Cum_Tri.csv")
library(tidyverse)
library(readxl)
library(rio)
library(dplyr)
library(tidyr)
library(ChainLadder)
library(lubridate)
library(readr)
library(zoo)
library(data.table)
data <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/January/Kenya Alliance Risk Adjustment/Data/Paid_Claims3.csv",
col_types = cols(Loss_Date = col_date(format = "%d/%m/%Y"),
Paid_Date = col_date(format = "%d/%m/%Y")))
unique(data$Statutory_Class)
table(data$Statutory_Class)
val_class<- c("Motor Private", "Motor Commercial")
#View(head(data,10))
#unique(data$Statutory_Class)
table(data$Statutory_Class)
#Classes<-("Personal Accident","Motor Private","Motor Commercial","Theft","Fire Industrial","Marine","Workmen's Compensation","Engineering","Fire Domestic","Miscellaneous","Liability")
#data <- data %>%
#  filter(Statutory_Class %in% val_class)
# Calculate IQR and Tukey's Fences
#Q1 <- quantile(data$Gross_paid,na.rm = TRUE, 0.15)
#Q3 <- quantile(data$Gross_paid,na.rm = TRUE, 0.85)
#IQR <- Q3 - Q1
#lower_fence <- Q1 - 1.5 * IQR
#upper_fence <- Q3 + 1.5 * IQR
#Threshold Method
#lower_fence<- -5000000
#upper_fence<- 3500000
# Remove outliers
#data <- data %>%
# filter(Gross_paid >= lower_fence & Gross_paid <= upper_fence)
# Replace outliers with the limits
#data <- data %>%
#mutate(Gross_paid = ifelse(Gross_paid < lower_fence, lower_fence,
#ifelse(Gross_paid > upper_fence, upper_fence, Gross_paid)))
data <- data %>%
mutate(
Acc_Months_ = as.yearmon(Loss_Date),
Acc_Year = as.integer(format(Acc_Months_, "%Y")),
Acc_Month = as.integer(format(Acc_Months_, "%m")),
Acc_Months = (Acc_Year - min(Acc_Year, na.rm = TRUE)) * 12 + Acc_Month - min(Acc_Month, na.rm = TRUE) + 1,
Loss_Year = year(Loss_Date),
Dev_period = floor(difftime(Paid_Date, Loss_Date, units = "days") / (365.25/12)) + 1
)
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
#View(head(data,7))
# Generate Acc_period
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
Periods <- data %>%
filter(Loss_Year>2019) %>%
distinct(Acc_Months) %>%
nrow()
Acc_period <- data %>%
filter(Loss_Year > 2019)%>%
select(Acc_Months) %>%
distinct() %>%
arrange(Acc_Months) %>%
rowwise() %>%
mutate(Dev_period = list(seq(1, Periods, 1))) %>%
unnest(Dev_period)
# Filter data based on val_class
Val_Data <- data %>%
filter(Statutory_Class %in%  val_class) %>%
select(Acc_Months, Gross_paid, Dev_period) %>%
mutate(Gross_paid = as.numeric(gsub("[^0-9.]", "", Gross_paid))) %>%
group_by(Acc_Months, Dev_period) %>%
summarise(Gross_Amount = sum(Gross_paid, na.rm = TRUE)) %>%
mutate(Dev_period = as.numeric(as.character(Dev_period))) %>%
right_join(Acc_period, by = c("Acc_Months", "Dev_period"))
# Create triangles
Inc_Tri <- as.triangle(Val_Data,
origin = "Acc_Months",
dev = "Dev_period",
value = "Gross_Amount")
Cum_Tri <- incr2cum(Inc_Tri,na.rm = TRUE)
# Perform Bootstrap
Boot_Method <- BootChainLadder(Cum_Tri, R = 9999)
# Summary
summary_Boot_Method <- summary(Boot_Method)$Totals
view(summary_Boot_Method)
# Confidence levels
confidence_level <- quantile(Boot_Method, c(0.75))
confidence_level <- confidence_level$ByOrigin
View(confidence_level)
#write.csv(Cum_Tri,"Cum_Tri.csv")
library(tidyverse)
library(readxl)
library(rio)
library(dplyr)
library(tidyr)
library(ChainLadder)
library(lubridate)
library(readr)
library(zoo)
library(data.table)
data <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/January/Kenya Alliance Risk Adjustment/Data/Paid_Claims3.csv",
col_types = cols(Loss_Date = col_date(format = "%d/%m/%Y"),
Paid_Date = col_date(format = "%d/%m/%Y")))
unique(data$Statutory_Class)
table(data$Statutory_Class)
val_class<- c("Motor Private", "Motor Commercial")
#View(head(data,10))
#unique(data$Statutory_Class)
table(data$Statutory_Class)
#Classes<-("Personal Accident","Motor Private","Motor Commercial","Theft","Fire Industrial","Marine","Workmen's Compensation","Engineering","Fire Domestic","Miscellaneous","Liability")
#data <- data %>%
#  filter(Statutory_Class %in% val_class)
# Calculate IQR and Tukey's Fences
#Q1 <- quantile(data$Gross_paid,na.rm = TRUE, 0.15)
#Q3 <- quantile(data$Gross_paid,na.rm = TRUE, 0.85)
#IQR <- Q3 - Q1
#lower_fence <- Q1 - 1.5 * IQR
#upper_fence <- Q3 + 1.5 * IQR
#Threshold Method
#lower_fence<- -5000000
#upper_fence<- 3500000
# Remove outliers
#data <- data %>%
# filter(Gross_paid >= lower_fence & Gross_paid <= upper_fence)
# Replace outliers with the limits
#data <- data %>%
#mutate(Gross_paid = ifelse(Gross_paid < lower_fence, lower_fence,
#ifelse(Gross_paid > upper_fence, upper_fence, Gross_paid)))
data <- data %>%
mutate(
Acc_Months_ = as.yearmon(Loss_Date),
Acc_Year = as.integer(format(Acc_Months_, "%Y")),
Acc_Month = as.integer(format(Acc_Months_, "%m")),
Acc_Months = (Acc_Year - min(Acc_Year, na.rm = TRUE)) * 12 + Acc_Month - min(Acc_Month, na.rm = TRUE) + 1,
Loss_Year = year(Loss_Date),
Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 12)
)
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
#View(head(data,7))
# Generate Acc_period
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
Periods <- data %>%
filter(Loss_Year>2019) %>%
distinct(Acc_Months) %>%
nrow()
Acc_period <- data %>%
filter(Loss_Year > 2019)%>%
select(Acc_Months) %>%
distinct() %>%
arrange(Acc_Months) %>%
rowwise() %>%
mutate(Dev_period = list(seq(1, Periods, 1))) %>%
unnest(Dev_period)
# Filter data based on val_class
Val_Data <- data %>%
filter(Statutory_Class %in%  val_class) %>%
select(Acc_Months, Gross_paid, Dev_period) %>%
mutate(Gross_paid = as.numeric(gsub("[^0-9.]", "", Gross_paid))) %>%
group_by(Acc_Months, Dev_period) %>%
summarise(Gross_Amount = sum(Gross_paid, na.rm = TRUE)) %>%
mutate(Dev_period = as.numeric(as.character(Dev_period))) %>%
right_join(Acc_period, by = c("Acc_Months", "Dev_period"))
# Create triangles
Inc_Tri <- as.triangle(Val_Data,
origin = "Acc_Months",
dev = "Dev_period",
value = "Gross_Amount")
Cum_Tri <- incr2cum(Inc_Tri,na.rm = TRUE)
# Perform Bootstrap
Boot_Method <- BootChainLadder(Cum_Tri, R = 9999)
# Summary
summary_Boot_Method <- summary(Boot_Method)$Totals
view(summary_Boot_Method)
# Confidence levels
confidence_level <- quantile(Boot_Method, c(0.75))
confidence_level <- confidence_level$ByOrigin
View(confidence_level)
#write.csv(Cum_Tri,"Cum_Tri.csv")
library(tidyverse)
library(readxl)
library(rio)
library(dplyr)
library(tidyr)
library(ChainLadder)
library(lubridate)
library(readr)
library(zoo)
library(data.table)
data <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/January/Kenya Alliance Risk Adjustment/Data/Paid_Claims3.csv",
col_types = cols(Loss_Date = col_date(format = "%d/%m/%Y"),
Paid_Date = col_date(format = "%d/%m/%Y")))
unique(data$Statutory_Class)
table(data$Statutory_Class)
val_class<- c("Motor Private", "Motor Commercial")
#View(head(data,10))
#unique(data$Statutory_Class)
#Classes<-("Personal Accident","Motor Private","Motor Commercial","Theft","Fire Industrial","Marine","Workmen's Compensation","Engineering","Fire Domestic","Miscellaneous","Liability")
#data <- data %>%
#  filter(Statutory_Class %in% val_class)
# Calculate IQR and Tukey's Fences
#Q1 <- quantile(data$Gross_paid,na.rm = TRUE, 0.05)
#Q3 <- quantile(data$Gross_paid,na.rm = TRUE, 0.95)
#IQR <- Q3 - Q1
#lower_fence <- Q1 - 1.5 * IQR
#upper_fence <- Q3 + 1.5 * IQR
#Threshold Method
#lower_fence<- -5000000
#upper_fence<- 3500000
# Remove outliers
#data <- data %>%
#  filter(Gross_paid >= lower_fence & Gross_paid <= upper_fence)
# Replace outliers with the limits
#data <- data %>%
#mutate(Gross_paid = ifelse(Gross_paid < lower_fence, lower_fence,
#ifelse(Gross_paid > upper_fence, upper_fence, Gross_paid)))
# Create additional columns
data$Loss_Year <- year((data$Loss_Date))
data$Acc_Quarters <- as.yearqtr((data$Loss_Date))
data <- data %>%
mutate(Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3))
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90
#View(head(data,7))
# Generate Acc_period
Periods <- data %>%
filter(Loss_Year>2019) %>%
distinct(Acc_Quarters) %>%
nrow()
Acc_period <- data %>%
filter(Loss_Year > 2019)%>%
select(Acc_Quarters) %>%
distinct() %>%
arrange(Acc_Quarters) %>%
rowwise() %>%
mutate(Dev_period = list(seq(1, Periods, 1))) %>%
unnest(Dev_period)
# Filter data based on val_class
Val_Data <- data %>%
filter(Statutory_Class %in%  val_class) %>%
select(Acc_Quarters, Gross_paid, Dev_period) %>%
group_by(Acc_Quarters, Dev_period) %>%
summarise(Gross_Amount = sum(Gross_paid,na.rm = TRUE)) %>%
right_join(Acc_period)
# Create triangles
Inc_Tri <- as.triangle(Val_Data,
origin = "Acc_Quarters",
dev = "Dev_period",
value = "Gross_Amount")
Cum_Tri <- incr2cum(Inc_Tri,na.rm = TRUE)
# Perform Bootstrap
Boot_Method <- BootChainLadder(Cum_Tri, R = 9999, process.distr = "od.pois")
# Summary
summary_Boot_Method <- summary(Boot_Method)$Totals
view(summary_Boot_Method)
# Confidence levels
confidence_level <- quantile(Boot_Method, c(0.75))
confidence_level <- confidence_level$ByOrigin
View(confidence_level)
#write.csv(Cum_Tri,"Cum_Tri.csv")
library(tidyverse)
library(readxl)
library(rio)
library(dplyr)
library(tidyr)
library(ChainLadder)
library(lubridate)
library(readr)
library(zoo)
library(data.table)
data <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/January/Kenya Alliance Risk Adjustment/Data/Paid_Claims3.csv",
col_types = cols(Loss_Date = col_date(format = "%d/%m/%Y"),
Paid_Date = col_date(format = "%d/%m/%Y")))
unique(data$Statutory_Class)
table(data$Statutory_Class)
val_class<- c("Motor Private", "Motor Commercial")
#View(head(data,10))
#unique(data$Statutory_Class)
#Classes<-("Personal Accident","Motor Private","Motor Commercial","Theft","Fire Industrial","Marine","Workmen's Compensation","Engineering","Fire Domestic","Miscellaneous","Liability")
#data <- data %>%
#  filter(Statutory_Class %in% val_class)
# Calculate IQR and Tukey's Fences
Q1 <- quantile(data$Gross_paid,na.rm = TRUE, 0.05)
Q3 <- quantile(data$Gross_paid,na.rm = TRUE, 0.95)
IQR <- Q3 - Q1
lower_fence <- Q1 - 1.5 * IQR
upper_fence <- Q3 + 1.5 * IQR
#Threshold Method
#lower_fence<- -5000000
#upper_fence<- 3500000
# Remove outliers
data <- data %>%
filter(Gross_paid >= lower_fence & Gross_paid <= upper_fence)
# Replace outliers with the limits
#data <- data %>%
#mutate(Gross_paid = ifelse(Gross_paid < lower_fence, lower_fence,
#ifelse(Gross_paid > upper_fence, upper_fence, Gross_paid)))
# Create additional columns
data$Loss_Year <- year((data$Loss_Date))
data$Acc_Quarters <- as.yearqtr((data$Loss_Date))
data <- data %>%
mutate(Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3))
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90
#View(head(data,7))
# Generate Acc_period
Periods <- data %>%
filter(Loss_Year>2019) %>%
distinct(Acc_Quarters) %>%
nrow()
Acc_period <- data %>%
filter(Loss_Year > 2019)%>%
select(Acc_Quarters) %>%
distinct() %>%
arrange(Acc_Quarters) %>%
rowwise() %>%
mutate(Dev_period = list(seq(1, Periods, 1))) %>%
unnest(Dev_period)
# Filter data based on val_class
Val_Data <- data %>%
filter(Statutory_Class %in%  val_class) %>%
select(Acc_Quarters, Gross_paid, Dev_period) %>%
group_by(Acc_Quarters, Dev_period) %>%
summarise(Gross_Amount = sum(Gross_paid,na.rm = TRUE)) %>%
right_join(Acc_period)
# Create triangles
Inc_Tri <- as.triangle(Val_Data,
origin = "Acc_Quarters",
dev = "Dev_period",
value = "Gross_Amount")
Cum_Tri <- incr2cum(Inc_Tri,na.rm = TRUE)
# Perform Bootstrap
Boot_Method <- BootChainLadder(Cum_Tri, R = 9999, process.distr = "od.pois")
# Summary
summary_Boot_Method <- summary(Boot_Method)$Totals
view(summary_Boot_Method)
# Confidence levels
confidence_level <- quantile(Boot_Method, c(0.75))
confidence_level <- confidence_level$ByOrigin
View(confidence_level)
#write.csv(Cum_Tri,"Cum_Tri.csv")
library(tidyverse)
library(readxl)
library(rio)
library(dplyr)
library(tidyr)
library(ChainLadder)
library(lubridate)
library(readr)
library(zoo)
library(data.table)
data <- read_csv("C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/January/Kenya Alliance Risk Adjustment/Data/Paid_Claims3.csv",
col_types = cols(Loss_Date = col_date(format = "%d/%m/%Y"),
Paid_Date = col_date(format = "%d/%m/%Y")))
unique(data$Statutory_Class)
table(data$Statutory_Class)
val_class<- c("Motor Private", "Motor Commercial")
#View(head(data,10))
#unique(data$Statutory_Class)
#Classes<-("Personal Accident","Motor Private","Motor Commercial","Theft","Fire Industrial","Marine","Workmen's Compensation","Engineering","Fire Domestic","Miscellaneous","Liability")
#data <- data %>%
#  filter(Statutory_Class %in% val_class)
# Calculate IQR and Tukey's Fences
Q1 <- quantile(data$Gross_paid,na.rm = TRUE, 0.10)
Q3 <- quantile(data$Gross_paid,na.rm = TRUE, 0.90)
IQR <- Q3 - Q1
lower_fence <- Q1 - 1.5 * IQR
upper_fence <- Q3 + 1.5 * IQR
#Threshold Method
#lower_fence<- -5000000
#upper_fence<- 3500000
# Remove outliers
data <- data %>%
filter(Gross_paid >= lower_fence & Gross_paid <= upper_fence)
# Replace outliers with the limits
#data <- data %>%
#mutate(Gross_paid = ifelse(Gross_paid < lower_fence, lower_fence,
#ifelse(Gross_paid > upper_fence, upper_fence, Gross_paid)))
# Create additional columns
data$Loss_Year <- year((data$Loss_Date))
data$Acc_Quarters <- as.yearqtr((data$Loss_Date))
data <- data %>%
mutate(Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3))
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90 + 1
#Dev_period = floor(((year(Paid_Date) * 12 + month(Paid_Date)) - (year(Loss_Date) * 12 + month(Loss_Date))) / 3)
#Dev_period = as.numeric(difftime(Paid_Date, Loss_Date, units = "days")) %/% 90
#View(head(data,7))
# Generate Acc_period
Periods <- data %>%
filter(Loss_Year>2019) %>%
distinct(Acc_Quarters) %>%
nrow()
Acc_period <- data %>%
filter(Loss_Year > 2019)%>%
select(Acc_Quarters) %>%
distinct() %>%
arrange(Acc_Quarters) %>%
rowwise() %>%
mutate(Dev_period = list(seq(1, Periods, 1))) %>%
unnest(Dev_period)
# Filter data based on val_class
Val_Data <- data %>%
filter(Statutory_Class %in%  val_class) %>%
select(Acc_Quarters, Gross_paid, Dev_period) %>%
group_by(Acc_Quarters, Dev_period) %>%
summarise(Gross_Amount = sum(Gross_paid,na.rm = TRUE)) %>%
right_join(Acc_period)
# Create triangles
Inc_Tri <- as.triangle(Val_Data,
origin = "Acc_Quarters",
dev = "Dev_period",
value = "Gross_Amount")
Cum_Tri <- incr2cum(Inc_Tri,na.rm = TRUE)
# Perform Bootstrap
Boot_Method <- BootChainLadder(Cum_Tri, R = 9999, process.distr = "od.pois")
# Summary
summary_Boot_Method <- summary(Boot_Method)$Totals
view(summary_Boot_Method)
# Confidence levels
confidence_level <- quantile(Boot_Method, c(0.75))
confidence_level <- confidence_level$ByOrigin
View(confidence_level)
#write.csv(Cum_Tri,"Cum_Tri.csv")
shiny::runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
unique(data$Statutory_Class)
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
shiny::runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
runApp('C:/Users/Robin Ochieng/OneDrive - Kenbright/Attachments/projects/2025/February/Financial & Retirement Planning Workbench')
